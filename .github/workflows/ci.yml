name: CI build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io

jobs:
  build-backend:
    name: build-backend-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        working-directory: ./backend-fachbeate/
        run: |
          chmod +x ./mvnw
          ./mvnw package -Dmaven.test.skip
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Convert GitHub repository name to lowercase
        run: echo "IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend-fachbeate/
          file: ./backend-fachbeate/src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}-api:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}-api:latest
          cache-to: type=inline


  build_frontend:
    #if: ${{ false }}  # disable frontend-build
    name: Build frontend
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: fachbeate-frontend
    defaults:
      run:
        working-directory: ./frontend-fachbeate
    strategy:
      matrix:
        node-version: [ 18.x ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Use Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v1
        with:
          node-version:
            ${{matrix.node-version}}
      - name: Cache node modules
        if: ${{ false }}
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules # path for node_modules folder
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          # name of the chache key includes package-lock.json
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        if:
        #steps.cache-nodemodules.outputs.cache-hit != 'true'
        # if cache hits, skip this step.
        run: npm ci --legacy-peer-deps
      - name: Build
        run: npm run build -- --configuration=production
      - name: Convert GitHub repository name to lowercase
        run: echo "IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Login to GitHub Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: docker build . -f Dockerfile --tag $IMAGE_NAME
      - name: Push image
        run: |
          IMAGE_ID= ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}-web
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo ${{ github.ref }} | cut -c11-)
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
